<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sinsiway Docs – Documentation</title><link>https://sinsiway-official.github.io/en/docs/</link><description>Recent content in Documentation on Sinsiway Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sinsiway-official.github.io/en/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: PcAPI_initialize → void</title><link>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-initilize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-initilize/</guid><description>
&lt;h3 id="synopsis">SYNOPSIS&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;PcAPIL.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">PcAPI_initialize&lt;/span>(&lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>info_file_path, &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>credentials_pw);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="description">DESCRIPTION&lt;/h3>
&lt;p>The &lt;strong>PcAPI_initialize&lt;/strong> function sets up the configuration file required to use the &lt;strong>libpcapi.so&lt;/strong> library. The configuration file contains information such as the key management server settings and the credentials needed for authentication.&lt;/p>
&lt;p>The &lt;strong>info_file_path&lt;/strong> parameter of the function should include the full path and file name of the configuration file, while the &lt;strong>credentials_pw&lt;/strong> parameter should contain the credentials password. This password should be the same as the one used when issuing the credentials value in the info_file_path file. If no password was used, an empty value (&amp;quot;&amp;quot;) can be entered.&lt;/p>
&lt;p>If the function is not called, the default read path is &lt;strong>&amp;quot;/var/tmp/.petra/petra_cipher_api.conf&amp;quot;&lt;/strong>, and no password is used.&lt;/p>
&lt;p>For detailed information, please refer to the &amp;ldquo;Installation Guide - Configuration File&amp;rdquo; section.&lt;/p>
&lt;h3 id="return-value">RETURN VALUE&lt;/h3>
&lt;p>The function returns 0 upon success.&lt;/p>
&lt;p>If an error occurs, it returns an error code less than 0.&lt;/p>
&lt;h3 id="errors">ERRORS&lt;/h3>
&lt;p>&lt;a href="../../../error-codes/#-30315">-30315&lt;/a>, &lt;a href="../../../error-codes/#-30316">-30316&lt;/a>, &lt;a href="../../../error-codes/#-30502">-30502&lt;/a>, &lt;a href="../../../error-codes/#-30511">-30511&lt;/a>&lt;/p>
&lt;h3 id="note">NOTE&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
Generally, the PcAPI_initialize() function uses the default path &amp;ldquo;/var/tmp/.petra/petra_cipher_api.conf&amp;rdquo; without being called if it is available. However, in exceptional cases where the system security solution or policy does not allow access to /var/tmp or a solution automatically deletes files under /var/tmp periodically, the function is used only in environments where it is difficult to use the /var/tmp path.
&lt;/div></description></item><item><title>Docs: PcAPI_getSession → int</title><link>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-getsession/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-getsession/</guid><description>
&lt;h3 id="synopsis">SYNOPSIS&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;PcAPIL.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">PcAPI_getSession&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span> client_ip);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="description">DESCRIPTION&lt;/h3>
&lt;p>The &lt;strong>PcAPI_getSession&lt;/strong> function converts the &lt;strong>client_ip&lt;/strong> passed as an argument into a hash string and uses it to find a session in the key server session pool. If an existing session exists, it returns the existing session, and if there is no session in the session pool, it creates a new session and returns a &lt;strong>signed 32-bit integer representing the session ID&lt;/strong>. The returned session ID is used for encryption/decryption.&lt;/p>
&lt;p>In addition, the returned session ID can be used for logging and auditing purposes on the server-side. This enables audit tracking of encryption/decryption activities.&lt;/p>
&lt;h3 id="return-value">RETURN VALUE&lt;/h3>
&lt;p>The function returns a signed 32-bit integer representing the session ID upon success.&lt;/p>
&lt;p>If an error occurs, it returns an error code less than 0.&lt;/p>
&lt;h3 id="errors">ERRORS&lt;/h3>
&lt;p>&lt;a href="../../../error-codes/#-30309">-30309&lt;/a>, &lt;a href="../../../error-codes/#-30310">-30310&lt;/a>, &lt;a href="../../../error-codes/#-30312">-30312&lt;/a>, &lt;a href="../../../error-codes/#-30315">-30315&lt;/a>, &lt;a href="../../../error-codes/#-30316">-30316&lt;/a>, &lt;a href="../../../error-codes/#-30340">-30340&lt;/a>, &lt;a href="../../../error-codes/#-30341">-30341&lt;/a>, &lt;a href="../../../error-codes/#-30342">-30342&lt;/a>, &lt;a href="../../../error-codes/#-30343">-30343&lt;/a>, &lt;a href="../../../error-codes/#-30344">-30344&lt;/a>&lt;/p></description></item><item><title>Docs: PcAPI_encrypt_name → int</title><link>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-encrypt-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-encrypt-name/</guid><description>
&lt;h3 id="synopsis">SYNOPSIS&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;PcAPIL.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">PcAPI_encrypt_name&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> api_sid,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>enc_col_name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>src,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> src_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>dst,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>dst_len
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="description">DESCRIPTION&lt;/h3>
&lt;p>The &lt;strong>PcAPI_encrypt_name&lt;/strong> function takes in the encryption column name &lt;strong>enc_col_name&lt;/strong> generated by Petra Cipher Key Server and the source data &lt;strong>src&lt;/strong> to encrypt the source data using the specified encryption column. The &lt;strong>api_sid&lt;/strong> parameter should be passed with the session ID returned by calling the PcAPI_getSession function. The session ID is used for communication with Petra Cipher Key Server and is also used for access control to the desired key and user identification in audit data.&lt;/p>
&lt;p>The function results in the encrypted data being stored in the &lt;strong>dst&lt;/strong> buffer and the length of the encrypted data being stored in the &lt;strong>dst_len&lt;/strong> parameter. The dst_len parameter should be at least as large as the size of the dst buffer and should be greater than or equal to src_len. Typically, the size of the dst buffer is about twice the size of the src buffer.&lt;/p>
&lt;p>However, because the encrypted data in the dst buffer does not have a final value after executing the PcAPI_encrypt_name function, you need to either cut the data from dst by the length of dst_len to use it or indicate the end of the data by setting &lt;code>dst[dst_len] = '\0'&lt;/code> if you want to use the dst buffer directly.&lt;/p>
&lt;h3 id="return-value">RETURN VALUE&lt;/h3>
&lt;p>The function returns 0 upon success.&lt;/p>
&lt;p>If an error occurs, it returns an error code less than 0.&lt;/p>
&lt;h3 id="errors">ERRORS&lt;/h3>
&lt;p>&lt;a href="../../../error-codes/#-30101">-30101&lt;/a>, &lt;a href="../../../error-codes/#-30103">-30103&lt;/a>, &lt;a href="../../../error-codes/#-30106">-30106&lt;/a>, &lt;a href="../../../error-codes/#-30115">-30115&lt;/a>, &lt;a href="../../../error-codes/#-30117">-30117&lt;/a>, &lt;a href="../../../error-codes/#-30301">-30301&lt;/a>, &lt;a href="../../../error-codes/#-30302">-30302&lt;/a>, &lt;a href="../../../error-codes/#-30351">-30351&lt;/a>, &lt;a href="../../../error-codes/#-30388">-30388&lt;/a>&lt;/p></description></item><item><title>Docs: PcAPI_decrypt_name → int</title><link>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-decrypt-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sinsiway-official.github.io/en/docs/c-cpp/methods/c-api-pcapi-decrypt-name/</guid><description>
&lt;h3 id="synopsis">SYNOPSIS&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;PcAPIL.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">PcAPI_decrypt_name&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> api_sid,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>enc_col_name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>src,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> src_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>dst,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>dst_len
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="description">DESCRIPTION&lt;/h3>
&lt;p>The &lt;strong>PcAPI_decrypt_name&lt;/strong> function takes the name of the encryption column created by the Petra Cipher Key Server &lt;strong>enc_col_name&lt;/strong> and the encrypted data &lt;strong>src&lt;/strong> as input, and provides the functionality to decrypt the original data using the corresponding encryption column. It is important to note that the &lt;strong>enc_col_name&lt;/strong> parameter must be identical to the name of the encryption column used in the encryption function PcAPI_encrypt_name, otherwise the decryption will fail.&lt;/p>
&lt;p>The &lt;strong>api_sid&lt;/strong> parameter must be populated with the session ID returned by calling the &lt;strong>PcAPI_getSession&lt;/strong> function. The session ID is used for communication with the Petra Cipher Key Server and is also used for access control and user identification in audit data.&lt;/p>
&lt;p>The function&amp;rsquo;s output is the decrypted data stored in the dst buffer, and the length of the decrypted data stored in the &lt;strong>dst_len&lt;/strong> parameter. &lt;strong>dst_len&lt;/strong> must be at least as large as the size of the &lt;strong>src buffer&lt;/strong>, and should be the same size as the dst buffer in most cases.&lt;/p>
&lt;p>If the decryption is successful, the original data will be stored in the dst buffer and the length of the original data will be stored in the dst_len parameter. However, since the decrypted data does not have a null terminator at the end, if you want to use the dst buffer directly, you need to add a null terminator to the end of the data by setting &lt;code>dst[dst_len] = '\0'&lt;/code> or by truncating the dst buffer to dst_len bytes.&lt;/p>
&lt;h3 id="return-value">RETURN VALUE&lt;/h3>
&lt;p>The function returns 0 upon success.&lt;/p>
&lt;p>If an error occurs, it returns an error code less than 0.&lt;/p>
&lt;h3 id="errors">ERRORS&lt;/h3>
&lt;p>&lt;a href="../../../error-codes/#-30101">-30101&lt;/a>, &lt;a href="../../../error-codes/#-30103">-30103&lt;/a>, &lt;a href="../../../error-codes/#-30105">-30105&lt;/a>, &lt;a href="../../../error-codes/#-30106">-30106&lt;/a>, &lt;a href="../../../error-codes/#-30107">-30107&lt;/a>, &lt;a href="../../../error-codes/#-30108">-30108&lt;/a>, &lt;a href="../../../error-codes/#-30111">-30111&lt;/a>, &lt;a href="../../../error-codes/#-30116">-30116&lt;/a>, &lt;a href="../../../error-codes/#-30117">-30117&lt;/a>, &lt;a href="../../../error-codes/#-30118">-30118&lt;/a>, &lt;a href="../../../error-codes/#-30302">-30302&lt;/a>, &lt;a href="../../../error-codes/#-30351">-30351&lt;/a>, &lt;a href="../../../error-codes/#-30388">-30388&lt;/a>, &lt;a href="../../../error-codes/#-30401">-30401&lt;/a>&lt;/p></description></item></channel></rss>