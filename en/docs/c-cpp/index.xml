<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sinsiway Docs â€“ C/C&#43;&#43;</title>
    <link>https://sinsiway-official.github.io/en/docs/c-cpp/</link>
    <description>Recent content in C/C&#43;&#43; on Sinsiway Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://sinsiway-official.github.io/en/docs/c-cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Installation</title>
      <link>https://sinsiway-official.github.io/en/docs/c-cpp/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sinsiway-official.github.io/en/docs/c-cpp/get-started/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&amp;ldquo;libpcapi.so&amp;rdquo;&lt;/strong&gt; is a C/C++ encryption library developed by Sinsiway. This library operates in the GCC compiler environment and can perform encryption and decryption functions on data. To do so, it obtains a session from the Petra Cipher Key Server and uses the encryption key received from the key server to perform operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;libpcapi.so&amp;rdquo;&lt;/strong&gt; can be used as a dynamic library in applications that require encryption functionality. To use the library, the application needs to link to the &amp;ldquo;libpcapi.so&amp;rdquo; library file.&lt;/p&gt;
&lt;p&gt;The library&amp;rsquo;s initialization function uses a configuration file to set the key server information and provides a function to specify the location of the configuration file. This allows users to initialize the library by specifying the location of the configuration file at the time of application execution.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;libpcapi.so&amp;rdquo; is an encryption library that can be used in various applications.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Implementation</title>
      <link>https://sinsiway-official.github.io/en/docs/c-cpp/implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sinsiway-official.github.io/en/docs/c-cpp/implementation/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;PcAPIL.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; encryptText[&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; decryptText[&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; sid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; PcAPI_getSession(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;keyName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ARIA-256-B64&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; rtn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;plainText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sinsiway petra cipher&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; encryptTextLen &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; decryptTextLen &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    memset(encryptText, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, encryptTextLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    memset(decryptText, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, decryptTextLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; PcAPI_encrypt_name(sid, keyName, plainText, strlen((&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;)plainText), encryptText, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;encryptTextLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; PcAPI_decrypt_name(sid, keyName, encryptText, encryptTextLen, decryptText, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;decryptTextLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The given example source code is an illustration of how to obtain a session and use encryption/decryption functions using the PetraCipher library, &lt;strong&gt;libpcapi.so.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The source code uses the &lt;strong&gt;PcAPIL.h header&lt;/strong&gt; file to invoke the PetraCipher library. The &lt;strong&gt;PcAPI_getSession()&lt;/strong&gt; function is used to obtain a session ID, and the &lt;strong&gt;PcAPI_encrypt_name()&lt;/strong&gt; and &lt;strong&gt;PcAPI_decrypt_name()&lt;/strong&gt; functions are used to encrypt and decrypt data.&lt;/p&gt;
&lt;p&gt;To use the PetraCipher library, a session must first be obtained, which is then used to encrypt or decrypt data. In each function, the session ID, encryption key name, plain data, etc. are passed as parameters.&lt;/p&gt;
&lt;p&gt;The PetraCipher library is designed for data protection and secure communication and can be used in various applications. The provided source code illustrates the basic usage of the library, and detailed instructions can be found in the library&amp;rsquo;s documentation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Methods</title>
      <link>https://sinsiway-official.github.io/en/docs/c-cpp/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sinsiway-official.github.io/en/docs/c-cpp/methods/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
